* ^^vector^^ 允许我们一个挨着一个地存储一系列数量可变的值
** 新建 vector

#+BEGIN_SRC rust
let v:Vec<i32> = Vec::new();

let v = vec![1,2,3];
#+END_SRC
** 更新vector

#+BEGIN_SRC rust
let mut v = Vec::new();
v.push(5);
v.push(6);
#+END_SRC
** 丢弃vector时也会丢弃其所有元素

#+BEGIN_SRC rust
    {
        let v = vec![1, 2, 3, 4];

        // 处理变量 v
    } // <- 这里 v 离开作用域并被丢弃
#+END_SRC
** 读取 vector 的元素
*** 索引语法或者get方法
:PROPERTIES:
:collapsed: true
:END:

#+BEGIN_SRC rust
let v = vec![1,2,3,4,5];
let third:&i32 = &v[2];
println!("The third element is {}",third);

match v.get(2) {
Some(third) => println!("The third element is {}",third),
None => println!("There is no third element."),
}

#+END_SRC
**** 索引从0开始
** 遍历vector中的元素

#+BEGIN_SRC rust
let v = vec![100,32,57];
for i in &v {
 println!("{}",i);
}
#+END_SRC
*** 遍历可变每个元素的可变引用

#+BEGIN_SRC rust
let mut v = vec![100,32,57];
for i in &mut v {
*i += 50; // 必须解引用获取值
}
#+END_SRC
*** 使用枚举来存储多种类型

#+BEGIN_SRC rust
enum SpreadsheetCell {
Int(i32),
Float(f64),
Text(String),
}
let row = vec![
SpreadsheetCell::Int(3),
SpreadsheetCell::Text(String::from("blue")),
SpreadsheetCell::Float(10.12),
]

#+END_SRC
* ^^字符串^^ 字符的集合
** 新建字符串

#+BEGIN_SRC rust
let mut s = String::new();

let data = "initial contents";

    let s = data.to_string();

    // 该方法也可直接用于字符串字面值：
    let s = "initial contents".to_string();
#+END_SRC
** 更新字符串

#+BEGIN_SRC rust
    let mut s = String::from("foo");
    s.push_str("bar");
#+END_SRC
*** 使用 + 运算符或 format! 宏拼接字符串
:PROPERTIES:
:collapsed: true
:END:

#+BEGIN_SRC rust
let s1 = String::from("Hello, ");
let s2 = String::from("world!");
let s3 = s1 + &s2; // 注意 s1 被移动了，不能继续使用

let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    let s = format!("{}-{}-{}", s1, s2, s3);
#+END_SRC
**** 宏 format! 生成的代码使用索引并且不会获取任何参数的所有权。
*** 遍历字符串的方法
**** 对于单独的Unicode标量值使用 chars 方法

#+BEGIN_SRC rust
for c in "नमस्ते".chars() {
    println!("{}", c);
}
#+END_SRC
**** bytes 方法返回每一个原始字节

#+BEGIN_SRC rust
for b in "नमस्ते".bytes() {
    println!("{}", b);
}
#+END_SRC
**** 有效的 Unicode 标量值可能会由不止一个字节组成。
* ^^哈希map^^ 将值与一个特定的键关联
所有的键必须是相同类型，值也必须都是相同类型
** 新建一个哈希 map

#+BEGIN_SRC rust
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Yellow"), 50);
#+END_SRC
*** 可以使用 zip 方法来创建一个元组的迭代器
#+BEGIN_SRC rust
  use std::collections::HashMap;

    let teams = vec![String::from("Blue"), String::from("Yellow")];
    let initial_scores = vec![10, 50];

    let mut scores: HashMap<_, _> =
        teams.into_iter().zip(initial_scores.into_iter()).collect();
#+END_SRC
** 哈希 map 和所有权
*** 对于像 i32 这样的实现了 Copy trait 的类型，其值可以拷贝进哈希 map。对于像 String 这样拥有所有权的值，其值将被移动而哈希 map 会成为这些值的所有者

#+BEGIN_SRC rust
use std::collections::HashMap;

    let field_name = String::from("Favorite color");
    let field_value = String::from("Blue");

    let mut map = HashMap::new();
    map.insert(field_name, field_value);
    // 这里 field_name 和 field_value 不再有效，
    // 尝试使用它们看看会出现什么编译错误！
#+END_SRC
** 访问哈希 map 中的值

#+BEGIN_SRC rust
  use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Yellow"), 50);

    let team_name = String::from("Blue");
    let score = scores.get(&team_name);
#+END_SRC
*** 遍历

#+BEGIN_SRC rust
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Yellow"), 50);

    for (key, value) in &scores {
        println!("{}: {}", key, value);
    }

#+END_SRC
** 更新哈希 map
*** 覆盖一个值

#+BEGIN_SRC rust
 use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Blue"), 25);

    println!("{:?}", scores);
#+END_SRC
*** 只在键没有对应值时插入

#+BEGIN_SRC rust
use std::collections::HashMap;

    let mut scores = HashMap::new();
    scores.insert(String::from("Blue"), 10);

    scores.entry(String::from("Yellow")).or_insert(50);
    scores.entry(String::from("Blue")).or_insert(50);

    println!("{:?}", scores);
#+END_SRC
**** Entry 的 or_insert 方法在键对应的值存在时就返回这个值的可变引用，如果不存在则将参数作为新值插入并返回新值的可变引用
*** 根据旧值更新一个值

#+BEGIN_SRC rust
use std::collections::HashMap;

    let text = "hello world wonderful world";

    let mut map = HashMap::new();

    for word in text.split_whitespace() {
        let count = map.entry(word).or_insert(0);
        *count += 1;
    }

    println!("{:?}", map);
#+END_SRC