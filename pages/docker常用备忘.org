* 清理空间
:PROPERTIES:
:collapsed: true
:END:
** ``` sh
docker system prune -a
```
* 访问宿主机
:PROPERTIES:
:collapsed: true
:END:
** #+BEGIN_TIP
host.docker.internal
#+END_TIP
* docker run -itd --name <docker-name> <docker image> bash
# example
docker run -itd --name unbuntu library/ubuntu:latest bash
* 运行交互式的容器
** -t：在新容器内指定一个伪终端或终端
** -P：将容器内部使用的网络端口随机映射到我们使用的主机上。
** -p 5000:5000 : 设置一个映射端口
** -i：允许你对容器内的标准输入(STDIN)进行交互
** /bin/bash：放在镜像名后是命令

#+BEGIN_SRC shell
// example
docker run -it golang:1.16 /bin/bash
#+END_SRC
* 启动容器(后台模式)

#+BEGIN_SRC shell
docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"
2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63
#+END_SRC
* 容器管理

#+BEGIN_SRC shell
docker ps -a // 查看容器进程
docker logs 2b1b7a428627 // 查看指定容器的标准输出
docker stop amazing_cori // 停止容器
docker pull ubuntu //获取镜像
docker run -it ubuntu /bin/bash //启动镜像
docker run -itd --name ubuntu-test ubuntu /bin/bash //后台运行
docker exec -it 243c32535da7 /bin/bash // 进入一个存在的容器
docker export 1e560fca3906 > ubuntu.tar // 导出容器
cat docker/ubuntu.tar | docker import - test/ubuntu:v1 // 导入容器快照
docker top wizardly_chandrasekhar //查看进程
docker inspect wizardly_chandrasekhar //查看底层信息
docker ps -l // 查询最后一次创建的容器
docker image prune -a // 删除所有未被容器使用的镜像
#+END_SRC
* 镜像管理
:PROPERTIES:
:collapsed: true
:END:

#+BEGIN_SRC shell
docker images  //列出本地主机上的镜像
docker pull ubuntu:13.10 // 获取一个新镜像
 docker search httpd // 查找一个镜像
 docker rmi hello-world //删除一个镜像
 docker tag 860c279d2fec runoob/centos:dev // 设置镜像标签
#+END_SRC
** 创建镜像
*** 从已经创建的容器中更新镜像，并且提交
**** 更新镜像之前，创建一个容器

#+BEGIN_SRC shell
docker run -t -i ubuntu:15.10 /bin/bash
#+END_SRC
**** 在运行的容器内使用apt-get update 命名进行更新，完成操作后输入exit退出容器，此时id为xxx,是按我们需求更改后的容器，通过命令提交容器副本


#+BEGIN_SRC shell
runoob@runoob:~$ docker commit -m="has update" -a="runoob" e218edb10161 runoob/ubuntu:v2
sha256:70bf1840fd7c0d2d8ef0a42a817eb29f854c1af8f7c59fc03ac7bdee9545aff8
#+END_SRC
***** -m: 提交的描述信息
***** -a: 指定镜像作者
***** e218edb10161：容器 ID
***** runoob/ubuntu:v2: 指定要创建的目标镜像名
*** 使用Dockerfile 指令来创建一个新的镜像
**** 每个指令都会在镜像上创建一个新层，每一个指令前缀都必须是大写
**** FROM 指定使用哪个镜像源
**** RUN 在镜像内执行的命令 安装什么。。。

#+BEGIN_SRC shell
docker build -t runoob/centos:6.7 .
#+END_SRC
***** -t：指定创建的目标镜像名
***** . : Dockerfile文件所在目录，可以指定Dockerfile的绝对路径
* 容器连接
:PROPERTIES:
:collapsed: true
:END:
** 容器命名 使用 --name 标识来给容器命名

#+BEGIN_SRC shell
docker run -d -P --name runoob training/webapp python app.py
43780a6eabaaf14e590b6e849235c75f3012995403f97749775e38436db9a441
#+END_SRC
** 新建网络

#+BEGIN_SRC shell
docker network create -d bridge test-net
#+END_SRC
*** -d: 指定网络类型 有 bridge,oberlay
** 连接容器

#+BEGIN_SRC shell
docker run -itd --name test1 --network test-net ubuntu /bin/bash
// 打开新的终端，在运行一个容器加入到test-net网络
docker run -itd --name test2 --network test-net ubuntu /bin/bash
#+END_SRC
** 配置DNS
*** 我们可以在宿主机的 /etc/docker/daemon.json 文件中增加以下内容来设置全部容器的 DNS

#+BEGIN_SRC json
{
  "dns" : [
    "114.114.114.114",
    "8.8.8.8"
  ]
}
#+END_SRC
*** 设置后，启动容器的 DNS 会自动配置为 114.114.114.114 和 8.8.8.8。
*** 配置完，需要重启 docker 才能生效。
*** 查看容器的 DNS 是否生效可以使用以下命令，它会输出容器的 DNS 信息：

#+BEGIN_SRC shell
docker run -it --rm  ubuntu  cat etc/resolv.conf
#+END_SRC
* 仓库管理

#+BEGIN_SRC shell
docker login // 登录
docker logout // 退出
docker search ubuntu // 搜索镜像
docker pull ubuntu // 拉取镜像
docker tag ubuntu:18.04 username/ubuntu:18.04  //推送镜像
#+END_SRC
* Dockerfile
** Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大

#+BEGIN_SRC shell
FROM centos
RUN yum -y install wget \
    && wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz" \
    && tar -xvf redis.tar.gz
#+END_SRC
** COPY 从上下文目录中复制文件或目录到容器指定路径

#+BEGIN_SRC shell
COPY [--chown=<user>:<group>] <源路径1>...  <目标路径>
COPY [--chown=<user>:<group>] ["<源路径1>",...  "<目标路径>"]
#+END_SRC
*** [--chown=<user>:<group>]：可选参数，用户改变复制到容器内文件的拥有者和属组。
*** <目标路径>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。
*** <源路径>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：

#+BEGIN_SRC shell
COPY hom* /mydir/
COPY hom?.txt /mydir/
#+END_SRC
** ADD 同COPY类似
*** ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。
** CMD 同RUN
*** CMD 在docker run 时运行
*** RUN 在 docker build
*** 作用：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。
*** 注意：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。

#+BEGIN_SRC shell
CMD <shell 命令> 
CMD ["<可执行文件或命令>","<param1>","<param2>",...] 
CMD ["<param1>","<param2>",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数
#+END_SRC
** ENTRYPOINT 
类似CMD 不会被docker run 的命令参数所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。
但是, 如果运行 docker run 时使用了 --entrypoint 选项，将覆盖 ENTRYPOINT 指令指定的程序。
*** *优点* 在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。
*** *注意* 如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。

#+BEGIN_SRC shell
ENTRYPOINT ["<executeable>","<param1>","<param2>",...]
#+END_SRC


#+BEGIN_SRC shell
FROM nginx

ENTRYPOINT ["nginx", "-c"] # 定参
CMD ["/etc/nginx/nginx.conf"] # 变参 
#+END_SRC
**** 不传参运行

#+BEGIN_SRC shell
docker run nginx:test
// 容器内以默认运行命令启动
nginx -c /etc/nginx/nginx.conf
#+END_SRC
**** 传参运行

#+BEGIN_SRC shell
docker run  nginx:test -c /etc/nginx/new.conf
// 容器内以下命令运行
nginx -c /etc/nginx/new.conf
#+END_SRC
*** ENV
设置环境变量，定义了环境变量，后续指令中就可以使用

#+BEGIN_SRC shell
ENV <key> <value>
ENV <key1>=<value1> <key2>=<value2>...
#+END_SRC
以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：

#+BEGIN_SRC shell
ENV NODE_VERSION 7.2.0

RUN curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz" \
  && curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"
#+END_SRC
*** ARG
构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。
构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。

#+BEGIN_SRC shell
ARG <参数名>[=<默认值>]
#+END_SRC
*** VOLUME
定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。

#+BEGIN_SRC shell
VOLUME ["<路径1>", "<路径2>"...]
VOLUME <路径>
#+END_SRC
在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。
*** EXPOSE
声明端口
**** 帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。
**** 在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。
*** WORKDIR
指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。
docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。

#+BEGIN_SRC shell
WORKDIR <工作目录路径>
#+END_SRC
*** USER
用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。

#+BEGIN_SRC shell
USER <用户名>[:<用户组>]
#+END_SRC
*** HEALTHCHECK
用于指定某个程序或者指令来监控 docker 容器服务的运行状态。

#+BEGIN_SRC shell
HEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令
HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令

HEALTHCHECK [选项] CMD <命令> : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。
#+END_SRC
*** ONBUILD
用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。
格式：

#+BEGIN_SRC shell
ONBUILD <其它指令>
#+END_SRC
*** LABEL
LABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：

#+BEGIN_SRC shell
LABEL <key>=<value> <key>=<value> <key>=<value> ...
#+END_SRC
比如我们可以添加镜像的作者：

#+BEGIN_SRC shell
LABEL org.opencontainers.image.authors="runoob"
#+END_SRC
* Compose
** 使用的三个步骤
*** 使用Dockerfile定义运用程序的环境
*** 使用docker-compose.yml定义构成运用程序的服务，这样它们可以在隔离的环境中一起运行
*** 最后，执行docker-compose up 命令启动并运行整个运用程序
** yml配置指令参考
*** version
**** 指定本 yml 依从的 compose 哪个版本制定的
*** build
**** 指定为构建镜像上下文路径：
例如 webapp 服务，指定为从上下文路径 ./dir/Dockerfile 所构建的镜像：

#+BEGIN_SRC yml
version: "3.7"
services:
  webapp:
    build: ./dir

#+END_SRC
**** 作为具有在上下文指定的路径的对象，以及可选的 Dockerfile 和 args：

#+BEGIN_SRC yml
version: "3.7"
services:
  webapp:
    build:
      context: ./dir
      dockerfile: Dockerfile-alternate
      args:
        buildno: 1
      labels:
        - "com.example.description=Accounting webapp"
        - "com.example.department=Finance"
        - "com.example.label-with-empty-value"
      target: prod

#+END_SRC
***** context: 上下文路径
***** dockerfile: 指定构建镜像的dockerfile文件名
***** args: 添加构建参数，这是只能在构建过程中访问的环境变量
***** labels: 设置构建镜像的标签
***** target: 多层构建，可以指定构建哪一层
*** cap_add, cap_drop 
添加或删除容器拥有的宿主机内核功能

#+BEGIN_SRC yml
cap_add:
  - ALL # 开启全部权限

cap_drop:
  - SYS_PTRACE # 关闭 ptrace权限
#+END_SRC
***
* docker样例
** 运行composer


#+BEGIN_SRC shell
alias composer2="docker run --rm -i --entrypoint /usr/bin/composer -w /usr/src/app --volume $PWD:/usr/src/app -v ~/.composer:/root/.composer -v ~/.ssh:/root/.ssh:ro composer:latest"
#+END_SRC
* k8s中copy文件

#+BEGIN_SRC sh
kubectl cp  pay-production/marketing-api-65b8547f84-r29w4:/tmp/dicos_text.csv a.csv  -c php
#+END_SRC