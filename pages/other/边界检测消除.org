- 重复检测
  相同的索引被重复访问时，后面的访问无需边界检测
  ``` go
  var s[]int 
  _ = s[i] //插入边界检测
  _ = s[i] //相同索引，不需要
  ```
- 常量大小
  访问数组(大小固定)，并且索引使用某些位操作计算得到
  ``` go
  var a[17]int
  _ = a[i&5] // 因为i&5 <=5 <17 ，边界检测消除
  ```
- 常量索引
  ``` go
  var s[]int
  if 5 < len(s) {
      _ = s[5] // 5 < len(s)，边界检测消除
  }
  ```
- 常量索引引常量大小
  ``` go
  var s[10]int
  _ = s[5]   // 5 < 10，边界检测消除
  ```
- 迭代中的索引
- 逐渐减小的常量索引
- 特殊情况
  ``` go
  var s[]int
  var index int
  _ = s[:index] // 插入边界检测
  _ = s[index:] // 插入边界检测
  ```
  为什么上面两条赋值语句都需要边界检测？因为一个子切片可以比原来的切片大。 在Go中，s[a:b]有两个限制：
  ``` 
  0 <= a <= len(s)
  a <= b <= cap(s)
  ```
- 程序优化
  例一：
  ``` go
  func f(isa []int, isb []int) {
      if len(isa) > 0xFFF {
          for _, n := range isb {
              _ = isa[n & 0xFFF] // for循环内边界检测会执行多次
          }
      }
  }
  ```
  调整为:
  ``` go
  func f(isa []int, isb []int) {
      if len(isa) > 0xFFF {
          isa = isa[:0xFFF+1] // 避免下面for循环中的边界检测
          for _, n := range isb {
              _ = isa[n & 0xFFF] // 边界检测消除！
          }
      }
  }
  ```
-