* #+BEGIN_EXAMPLE
git remote show origin
删除远程分支
git push origin --delete refund-time
删除本地分支
git branch -d refund-time
创建分支
git checkout -b xxx
git log --oneline --graph --decorate
一个仓的直线提交图标 
git ls-files 
git log --oneline --stat
MAIL_PASSWORD=aznwwudlvcfybjbi
1. git log filename
可以看到fileName相关的commit记录
2. git log -p filenam
可以显示每次提交的diff
git log -p 7afd2c5f124a82318e4e7309c997ea4beef66436 src/config/pay.php
3. 只看某次提交中的某个文件变化，可以直接加上fileName
我们可以使用 git 自带的 git filter-branch 命令来实现。
git filter-branch --force --index-filter \
'git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA' \
--prune-empty --tag-name-filter cat -- --all
上传覆盖github的commit history
git push origin --force --all (--all 作用于所有分支)
PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA 是你需要删除的敏感信息文件名
--------------------- 
清空提交记录
 	0.	尝试 运行 git checkout --orphan latest_branch
 	0.	添加所有文件git add -A
 	0.	提交更改git commit -am "commit message"
 	0.	删除分支git branch -D master
 	0.	将当前分支重命名git branch -m master
 	0.	最后，强制更新存储库。git push -f origin master
git reset --hard HEAD^ 
git push —force


Command line instructions
Git global setup
git config --global user.name "袁于东"
git config --global user.email "yorick.yuan@verystar.cn"
Create a new repository
git clone git@git.verystar.cn:verypay/eticket-sdk-php.git
cd eticket-sdk-php
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master
Existing folder
cd existing_folder
git init
git remote add origin git@git.verystar.cn:verypay/eticket-sdk-php.git
git add .
git commit -m "Initial commit"
git push -u origin master
Existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin git@git.verystar.cn:verypay/eticket-sdk-php.git
git push -u origin --all
git push -u origin --tags
#+END_EXAMPLE
* Github上fork项目后与原项目保持同步

#+BEGIN_TIP
**步骤**
假设来源为 `https://github.com/_original/_project.git`
fork 项目为  `https://github.com/_your/_project.git`
 
1. 检出自己在github上fork别人的分支到目录下  
        git clone https://github.com/_your/_project.git
2. 进到 _project 目录下，然后增加远程分支(fork的分支)，名为 update_stream（名字任意）到本地
        git remote add update_stream https://github.com/_original/_project.git
3. 运行命令：`git remote -v`, 会发现多出来了一个update_stream的远程分支
        git remote -v
4. 然后把远程原始分支 update_stream 的代码拉到本地  
        git fetch update_stream
 
5. 合并对方远程原始分支 update_stream 的代码
        git merge update_stream/master
6. 最后把最新的代码推送到你的github上
    git push origin master
7. 如果需要给update_stream发送Pull Request
    打开 `https://github.com/_your/_project.git`  
    点击Pull Request -> 点击New Pull Request -> 输入Title和功能说明 -> 点击Send pull request
#+END_TIP
* git仓库拉代码设置代理

#+BEGIN_TIP
git config --global http.proxy
11087 git config --global http.proxy http://127.0.0.1:1087

设置代理
git config --global https.proxy [http://127.0.0.1:1080](http://127.0.0.1:1080/)

git config --global https.proxy [https://127.0.0.1:1080](https://127.0.0.1:1080/)

取消代理
git config --global --unset http.proxy

git config --global --unset https.proxy
#+END_TIP
* #+BEGIN_SRC 
在项目开发过程中个，一般都会添加 .gitignore 文件，规则很简单，但有时会发现，规则不生效。

原因是 .gitignore 只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。

那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交。
git rm -r --cached .

git add .

git commit -m 'update .gitignore'

#+END_SRC
* git commit之后，撤销commit

#+BEGIN_SRC sh
git reset --soft HEAD^
#+END_SRC