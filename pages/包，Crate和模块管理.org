* 概论
:PROPERTIES:
:collapsed: true
:END:
** 包(Package)：Cargo的一个功能，它允许你构建、测试和分享crate
** Crates：一个模块的树形结构，形成了库或二进制目录
** 模块(Modules) 和use：允许你控制作用域和路径的私有性
** 路径(path)：一个命名例如结构体、函数或模块等项的方式
* 包（package） 是提供一系列功能的一个或者多个 crate。一个包会包含有一个 Cargo.toml 文件，阐述如何去构建这些 crate。
:PROPERTIES:
:collapsed: true
:END:
** 规则
*** 包中可以包含至多一个库 crate(library crate)。
*** 包中可以包含任意多个二进制 crate(binary crate)，
*** 但是必须至少包含一个 crate（无论是库的还是二进制的）。
** src/main.rs 就是一个与包同名的二进制 crate 的 crate 根。
** 如果一个包同时含有 src/main.rs 和 src/lib.rs，则它有两个 crate：一个二进制的和一个库的，且名字都与包相同。
* 定义模块来控制作用域与私有性
:PROPERTIES:
:collapsed: true
:END:
** 创建库

#+BEGIN_SRC rust
cargo new --lib restaurant
#+END_SRC
** ~src/main.rs~ 和 ~src/lib.rs~ 叫做 crate 根
** 倾向于使用绝对路径，因为把代码定义和项调用各自独立地移动是更常见的。
** 父模块中的项不能使用子模块中的私有项
** 子模块中的项可以使用他们父模块中的项。
** 使模块公有并不使其内容也是公有的。模块上的 pub 关键字只允许其父模块引用它
** 使用super起始的相对路径(构建从父模块开始的相对路径，类似文件系统的 ~..~ )

#+BEGIN_SRC rust
fn serve_order() {}

mod back_of_house {
    fn fix_incorrect_order() {
        cook_order();
        super::serve_order();
    }

    fn cook_order() {}
}
#+END_SRC
** 如果我们在一个结构体定义的前面使用了 pub ，这个结构体会变成公有的，但是这个结构体的字段仍然是私有的。
** 可以根据情况决定每个字段是否公有
* 使用use 引入作用域
** 要想使用 use 将函数的父模块引入作用域，我们必须在调用函数时指定父模块
** 使用 use 引入结构体、枚举和其他项时，习惯是指定它们的完整路径
** 使用 as 指定一个新的本地名称或者别名
** 将 pub 和 use 合起来使用。这种技术被称为 “重导出（re-exporting）
** 嵌套路径消除大量的use行

#+BEGIN_SRC rust
use std::io::{self, Write};
// ==
// --snip--
use std::cmp::Ordering;
use std::io;
// --snip--
#+END_SRC
** 通过 glob 运算符将所有的公有定义引入作用域

#+BEGIN_SRC rust
use std::collections::*;
#+END_SRC
*** glob 运算符经常用于测试模块 tests 中，这时会将所有内容引入作用域
** 将模块分割进不同文件

#+BEGIN_SRC rust
// 文件名: src/lib.rs
mod front_of_house;

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

// 文件名: src/front_of_house.rs
pub mod hosting {
    pub fn add_to_waitlist() {}
}
pub mod hosting;
#+END_SRC
** mod 关键字声明了模块，Rust 会在与模块同名的文件中查找