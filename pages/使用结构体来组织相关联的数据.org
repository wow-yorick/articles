* [[定义并实例化结构体]]
* 可以选择将方法的名称与结构中的一个字段相同。
:PROPERTIES:
:collapsed: true
:END:

#+BEGIN_SRC rust
struct Rectangle {
width:u32,
height:u32,
}
impl Rectangle {
fn width(&self) -> bool {
 self.width > 0
}
}
fn main() {
let rect1 = Rectangle {
width:30,
height:50,
};
if rect1.width() {
println!("{}",rect1.width);
}
}
#+END_SRC
** 调用时加上括号，指的是方法，不带括号就是指调用字段
** 与字段同名的方法呗定义为只返回字段中的值，而不做其他事。被称为getters
** 仅仅读取 ~(&self)~ 做出修改 ~(&mut self)~ 获取所有权 ~(self)~
* 带有更多参数的方法

#+BEGIN_SRC rust
impl Rectangle {
  fn can_hold(&self, other: &Rectangle) -> bool {
      self.width > other.width && self.height > other.height
  }
}

#+END_SRC
* 关联函数
** 不以 ~self~ 为第一参数的关联函数(不是方法)
** 经常呗用作返回一个结构体新实例的构造函数
** 使用结构体名和 ~::~ 语法来调用 ~let sq = Rectangle::square(3);~
#+BEGIN_SRC rust
impl Rectangle {
  fn square(size:u32) -> Rectangle {
    Rectange {
        width:size,
        height:size,
    }
  }
}
#+END_SRC
* 多个 impl 块
** 每个结构体都允许拥有多个 impl 块
* 一些常用信息
** std::fmt::Display
** std::fmt::Debug
** {:?}
** {:#?}