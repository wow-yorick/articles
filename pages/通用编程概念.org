* 表达式产生一个值，语句执行一个动作，不一定产生值
* 变量与可变性
:PROPERTIES:
:collapsed: true
:END:
** 默认不可变

#+BEGIN_SRC rust
let x = 5;
#+END_SRC
** 可变变量

#+BEGIN_SRC rust
let mut x = 5;
#+END_SRC
** 常量
:PROPERTIES:
:collapsed: true
:END:
*** 不可用mut
*** 使用const，类型必须标注
*** 可以在任何作用域
*** 只可以绑定到常量表达式，无法绑定到函数的调用结果或只能在运行时才能计算出的值
*** 程序运行期间，常量在其声明的作用域中一直有效
*** 规范：全大写，单词之间用下划线分开
** Shadowing
*** 可以使用相同的名字声明新的变量，新的变量就会shadow之前声明的同名变量
* 数据类型
:PROPERTIES:
:collapsed: true
:END:
** 标量类型(单个的值)
:PROPERTIES:
:collapsed: true
:END:
*** 整数类型(u无符号类型) (i有符号类型)
**** 有符号： -(2^n -1) 到 2^(n-1) -1
**** 无符号：0 到 2^n -1
**** isize 和usize 由程序运行的计算机架构所决定
**** 整数字面值
| Number literals | Example|
|Decimal|98_222|
|Hex| 0xff|
|Octal|0o77|
|Binary|0b1111_0000|
|Byte(u8 only)| b'A'|
**** 除了byte类型外，所有的数值字面值都允许使用类型后缀 57u8
**** 整数类型默认i32
**** 发布模式下 rust不会检查整数溢出
会执行“环绕”操作  如 256 变成0 257变成1
*** 浮点类型
**** f32 单精度
**** f64 双精度 (默认类型)
**** IEEE-754标准表述
*** 布尔类型 true 和 false
**** 一个字节大小
**** 符号 bool
*** 字符类型char
**** 描述单个字符
**** 字面值用单引号
**** 占4个字节
**** Unicode标量值
***** U+0000 到U+D7FF
***** U+E000 到 U+10FFFF
***** Unicode中没有‘字符’的概念，直觉上认为的字符与rust中的概念不相符
****
** 复合类型(多个值放在一个类型里)
:PROPERTIES:
:collapsed: true
:END:
*** 元组(Tuple)
**** 多个类型的多个值放在一个类型里
**** 长度固定：一旦声明就无法改变
**** #+BEGIN_SRC rust
let tup:(i32,f64,u8) = (500,6.4,1);
#+END_SRC
**** 模式匹配解构获取值

#+BEGIN_SRC rust
let (x,y,z) = tup;
#+END_SRC
**** 访问元素使用点标记法，后接元素索引
*** 数组
:PROPERTIES:
:collapsed: true
:END:
**** 多个值，元素类型必须一致
**** 长度也是固定的
**** #+BEGIN_SRC rust
let a = [1,2,3,4];
#+END_SRC
**** 想让数据存放在栈上，或者保证固定数量的元素
**** 数组类型

#+BEGIN_SRC rust
let a:[i32;5] = [1,2,3,4];
#+END_SRC
**** 另一种声明方法

#+BEGIN_SRC rust
let a = [3;5]; 相当于 let a = [3,3,3,3,3];
#+END_SRC
*** Vector
**** 标准库提供
**** 长度可变
* 函数
:PROPERTIES:
:collapsed: true
:END:
** 惯例: 函数和变量名 snake case 规范
** 返回值时函数体里最后一个表达式的值
** 若想提前返回，需使用return关键字，并指定一个值
** 没有分号是表达式
** 有分号是语句

#+BEGIN_SRC rust
let number = if condition { 5 } else { 6 }
#+END_SRC
* 循环
** loop

#+BEGIN_SRC rust
let mut counter = 0;
let result = loop {
counter +=1;
if counter == 10 {
break counter *2;
}
println!("the result is:{}", result);
}

#+END_SRC
** while

#+BEGIN_SRC rust
let mut number = 10
while number != 0 {
number = number -1;
}
#+END_SRC
** for

#+BEGIN_SRC rust
let a = [10,20,30,40,50];
for element in a.iter() {
println!("the value is: {}",element);
}
#+END_SRC
** range
*** 标准库提供
*** 指定一个开始数字和一个结束数字，Range生成它们之间的数字(不含结束)
*** rev 方法可以反转 Range