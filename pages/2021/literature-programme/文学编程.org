#+TITLE: 文学编程简介
#+URL: http://www.5zyx.com
#+AUTHOR: SOLID-10
#+CATEGORY: org-mode
#+DATE: <2021-07-30 Fri>
#+OPTIONS: ^:{}

第一段

第二段 [[http://www.baidu.com][链接]]

#+begin_example
[[链接][说明]]

=高亮=
<s + <tab> 插入源码块

#+end_example

* 必要条件
v8.2.10(或更新) =C-h v <RET> org-version=

** 若太旧，运行下面代码
#+begin_src emacs-lisp
  (when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list 'package-archives
                 '("org" . "http://orgmode.org/elpa/")
                 t)
    (package-initialize)
    (package-refresh-contents)
    (package-install "org"))
#+end_src

** 安装增强
[[http://orgmode.org/worg/org-contrib/][org-plus-contrib]]

* 优势
+ 代码更易理解
+ 方便团队讨论问题
+ 学习新库和api时可以一边实验一边笔记

  #+begin_src org
- TAGE :: some thing
  #+end_src

  #+begin_src emacs-lisp
    (directory-files ".")
  #+end_src

  #+RESULTS:
  | . | .#文学编程.org | .. | 01-03-六年没联系的哥们给我打电话了.org | 07-18-全新的开始.org | Logseq介绍.md | literature-programme | 文学编程.org | 未来的迷茫.md | 生活.md |

  + =C-c C-c= 执行该命令

  + =C-C '(单引号)= 以指定语言的mode进行编辑代码

  + 输入 =<s <TAB>= 可以快速创建一个代码块

  + 使用 =C-c M-f= 跳转到文件中下一个代码块位置 =C-c M-b= 上一个代码块位置

    #+begin_src shell
      ls -l
    #+end_src

** 其他语言

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sh         . t)
     (js         . t)
     (emacs-lisp . t)
     (perl       . t)
     (scala      . t)
     (clojure    . t)
     (python     . t)
     (ruby       . t)
     (dot        . t)
     (css        . t)
     (plantuml   . t)))
  
#+end_src

** 代码块设置
*** dir参数
#+begin_src shell :dir ~/workspace
  ls
#+end_src


=通过Tramp实现在远程服务器上执行代码没懂=
#+begin_src shell :dir /5zyx.com:
  hostname -f
#+end_src

#+RESULTS:
: WSSHA126093G1J1.local
*** 设置头参数的位置

  * 头参数嵌入到代码块中,或者在代码块上面
  * 设置某一标题下面所有代码块的默认头参数
  * 设置整个文档中所有代码块的默认头参数
  * 设置所有文档中所有代码块的默认头参数

* 设置标签                                                                :tag:

*  影响输出格式的结果
+ table :: 若结果为单个数组,则插入一行,若结果为数组的数组,则插入一个表格
+ list :: 按照普通org-mode列表格式插入一个无序列表
+ vervatim :: 原样输出
+ file :: 将结果写入到文件
+ html :: 认为执行的结果是HTML代码,导出时原样导出
+ code :: 认为执行的结果还是原语言的代码
+ silent :: 只在mini-buffer中显示执行结果

** 导出
按下 =C-c C-e h o= 导出成html文件
  
#+begin_src ruby :results output :file primes.txt :exports both
  puts 'hello world'
  5*6
#+end_src

#+RESULTS:
: hello world


** session
默认情况下,每个代码块在每次运行时都会重启自己的一个解释器. 通过为[[http://orgmode.org/org.html#session][:session]] 头参数设置一个标签值,则所有拥有同一标签的代码块在运行时都在同一个解释器session中. 为什么要这样做呢? 因为每次都重启解释器有以下几个问题:

* 文学编程

从org-mode文件中抽取出源代码来创建源代码文件  tangling

** Tangling

#+begin_src ruby :tangle double-space.rb
  when s = gets
    print s ; puts
  end
#+end_src

输入 =C-c C-v t= 生成 double-space.rb


* 变量

  #+HEADER: :var b=3 c=4 e=79 :var g=44
  #+begin_src ruby :results verbatim :var a=42 d=56 :var f=23
  [a,b,c,d,e,f,g]
  #+end_src

  #+RESULTS:
  : [42, 3, 4, 56, 79, 23, 44]

** 将代码块的结果作为值传递给另一个代码块
#+NAME: twelve-primes
#+begin_src ruby
  require 'prime'
  Prime.first 12
#+end_src

#+RESULTS: twelve-primes
| 2 | 3 | 5 | 7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 | 37 |

#+begin_src python :var primes=twelve-primes
return primes[-1]
#+end_src

#+RESULTS:
: 37

ruby 与python 结合完成任务

** 表格形式的变量数据

#+NAME: cool-numbers
#+begin_src emacs-lisp
  (mapcar (lambda (i)
            (list i (random 10)
                  (expt i 2) (random 100)
                  (expt i 3) (random 1000)))
          (number-sequence 1 10))
#+end_src

#+RESULTS: cool-numbers
|  1 | 3 |   1 | 83 |    1 | 932 |
|  2 | 0 |   4 | 86 |    8 | 114 |
|  3 | 9 |   9 | 39 |   27 | 550 |
|  4 | 6 |  16 | 90 |   64 | 623 |
|  5 | 8 |  25 |  9 |  125 | 963 |
|  6 | 0 |  36 | 39 |  216 | 102 |
|  7 | 4 |  49 | 49 |  343 | 814 |
|  8 | 0 |  64 | 72 |  512 |  33 |
|  9 | 2 |  81 | 42 |  729 | 642 |
| 10 | 3 | 100 | 27 | 1000 | 702 |

#+begin_src python :var nums=cool-numbers :results list
  return [cell +1 for row in nums for cell in row]
#+end_src

** 表格分片

指定一个索引编号

#+NAME: cubes
#+begin_src ruby :var fifth=cool-numbers[,4]
fifth
#+end_src

#+RESULTS: cubes
| 1 | 8 | 27 | 64 | 125 | 216 | 343 | 512 | 729 | 1000 |

** 对结果进行修正

#+NAME: skip_first
#+begin_src emacs-lisp :var data="" :exports none
(cdr data)
#+end_src

#+begin_src shell :post skip_first(data=*this*)
ls -al 
#+end_src


** 调用代码块

#+NAME: roots_of_list
#+begin_src python :var lst=cubes :results list
  import math
  return [math.sqrt(n) for n in lst]
#+end_src


#+CALL: roots_of_list(lst='(16 144 81 61))

#+RESULTS:
- 4.0
- 12.0
- 9.0
- 7.810249675906654

  使用 cool-numbers 表格中的一列作为被传递的值
#+begin_src org
  ,#+CALL: roots_of_list( lst=cool-numbers[,2] )

  ,#+RESULTS:
  | 1.0 | 2.0 | 3.0 | 4.0 | 5.0 | 6.0 | 7.0 | 8.0 | 9.0 | 10.0 |
#+end_src

** 嵌入运算结果

src_ruby{5+6} {{{results(=11=)}}}
