* 定义结构体

#+BEGIN_SRC rust
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}
#+END_SRC
* 使用字段初始化简写语法

#+BEGIN_SRC rust
fn build_user(email: String, username: String) -> User {
    User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
}
#+END_SRC
* 使用结构体更新语法从其他实例创建实例

#+BEGIN_SRC rust
fn main() {
    // --snip--

    let user2 = User {
        active: user1.active,
        username: user1.username,
        email: String::from("another@example.com"),
        sign_in_count: user1.sign_in_count,
    };
}

fn main() {
    // --snip--

    let user2 = User {
        email: String::from("another@example.com"),
        ..user1
    };
}

#+END_SRC
** 结构更新语法就像带有 = 的赋值，因为它移动了数据，就像我们在“变量与数据交互的方式（一）：移动”部分讲到的一样。在这个例子中，我们在创建 user2 后不能再使用 user1，因为 user1 的 username 字段中的 String 被移到 user2 中。如果我们给 user2 的 email 和 username 都赋予新的 String 值，从而只使用 user1 的 active 和 sign_in_count 值，那么 user1 在创建 user2 后仍然有效。active 和 sign_in_count 的类型是实现 Copy trait 的类型，所以我们在“变量与数据交互的方式（二）：克隆” 部分讨论的行为同样适用。
* 元组结构体

#+BEGIN_SRC rust
struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

fn main() {
    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);
}
#+END_SRC
* 类单元结构体

#+BEGIN_SRC rust
struct AlwaysEqual;

fn main() {
    let subject = AlwaysEqual;
}
#+END_SRC