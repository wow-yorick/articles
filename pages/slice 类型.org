* 字符串slice
** 前后位置说明
#+BEGIN_SRC rust
    let s = String::from("hello world");

    let hello = &s[0..5];
    let world = &s[6..11];
#+END_SRC
*** ~starting_index~ 是slice第一个位置, ~ending_index~ 
 则是slice最后一个位置的后的一个值
*** slice数据结构存储了~slice~ 的开始位置和长度，长度对应于 ~ending_index~ 减去 ~starting_index~ 的值
** 简写 如果从开头开始，或者到结束，起始的0 和结尾的 ~s.len()~ 可以省略
*** 样例
#+BEGIN_SRC rust
// 从零开始
let s = String::from("hello");

let slice = &s[0..2];
let slice = &s[..2];
// 到结束
let s = String::from("hello");

let len = s.len();

let slice = &s[3..len];
let slice = &s[3..];
// 整个字符串
let s = String::from("hello");

let len = s.len();

let slice = &s[0..len];
let slice = &s[..];

#+END_SRC
** 样例
*** #+BEGIN_SRC rust
fn first_word(s: &String) -> &str {
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}
#+END_SRC
* 字符串字面值就是slice
** #+BEGIN_SRC rust
let s = "Hello,world!";
#+END_SRC
** ~s~ 的类型是 ~&str~ 它是指向二进制程序特定位置的slice ~&str~ 是一个不可变引用
* 字符串slice作为参数

#+BEGIN_SRC rust
fn main() {
    let my_string = String::from("hello world");

    // `first_word` 适用于 `String`（的 slice），整体或全部
    let word = first_word(&my_string[0..6]);
    let word = first_word(&my_string[..]);
    // `first_word` 也适用于 `String` 的引用，
    // 这等价于整个 `String` 的 slice
    let word = first_word(&my_string);

    let my_string_literal = "hello world";

    // `first_word` 适用于字符串字面值，整体或全部
    let word = first_word(&my_string_literal[0..6]);
    let word = first_word(&my_string_literal[..]);

    // 因为字符串字面值已经 **是** 字符串 slice 了，
    // 这也是适用的，无需 slice 语法！
    let word = first_word(my_string_literal);
}

#+END_SRC